<h4>the basics</h4>

<p>This logging library attempts to be as compatible as possible (that
is: as it was conceivable to the author) to the standard <a
href="http://docs.python.org/library/logging.html">Python logging</a>
library.  If you are accustomed to that logging library, this one will
look familiar to you, otherwise have a look at this <a
href="python-logging-excerpt.php">excerpt</a>, then decide if you want
to come back here and read further or go to the Python documentation
and read deeper.</p>

<p>In this session we work with one single logger, the root logger,
and we use only console handlers.</p>

<p>Start up R, load the library, use the basic configuration.</p>

<code>
R> <user>library(logging)</user><br/>
R> <user>basicConfig()</user><br/>
R>
</code>

<p>Let's check the effect of the above actions.  Both our loggers and
handlers are environments, so we can use for example <tt>ls</tt>
and <tt>with</tt> to inspect them (don't worry if you get more
elements than shown here, I'll come back to them later).

After this basic configuration,
our logger has handlers and a level, and it contains one handler
which <em>also</em> has a level.  This
is enough for some simple logging to the console.  The default logging
level of both the root logger and its handler
is <tt>INFO</tt> (20).  Anything at severity
lower than <tt>INFO</tt> will not be logged.</p>

<code>
R> <user>ls(getLogger())</user><br/>
[1] "handlers" "level"<br/>
R> <user>getLogger()[['level']]</user><br/>
INFO <br/>
&nbsp; 20 <br/>
R> <user>getLogger()[['handlers']]</user><br/>
$basic.stdout<br/>
&lt;environment: 0x........><br/>
<br/>
R> <user>loginfo('does it work?')</user><br/>
2010-04-08 11:28:35 INFO::does it work?<br/>
R> <user>logwarn('my %s is %d', 'name', 5)</user><br/>
2010-04-08 11:28:48 WARN::my name is 5<br/>
R> <user>logdebug('I am a silent child')</user><br/>
R>
</code>

<p>We add an other handler to the console, without specifying its
name.  It gets one automatically from the name of the function.  You
can add and remove handlers using their names.  You can also refer to
them by function, if that is the way you defined it.</p>

<code>
R> <user>addHandler(writeToConsole)</user><br/>
R> <user>names(getLogger()[['handlers']])</user><br/>
[1] "basic.stdout"   "writeToConsole"<br/>
R> <user>loginfo('test')</user><br/>
2010-04-07 11:31:06 INFO::test<br/>
2010-04-07 11:31:06 INFO::test<br/>
R> <user>logwarn('test')</user><br/>
2010-04-07 11:31:15 WARN::test<br/>
2010-04-07 11:31:15 WARN::test<br/>
R> <user>removeHandler('writeToConsole')</user><br/>
R> <user>logwarn('test')</user><br/>
2010-04-07 11:32:37 WARN::test<br/>
R>
</code>

<p>Handlers have a level associated to them.  Any logging record
passing through a handler and having a severity lower than the level
of the handler is ignored.  You can alter the level of a handler.
this is what we do in the following lines: we alter the level of the
default console handler 'basic.stdout' to 30 (<tt>WARN</tt>).  </p>

<code>
R> <user>addHandler(writeToConsole)</user><br/>
R> <user>setLevel(30, getHandler('basic.stdout'))</user><br/>
R> <user>logwarn('test')</user><br/>
2011-08-03 15:59:13 WARNING::test<br/>
2011-08-03 15:59:13 WARNING::test<br/>
R> <user>loginfo('test')</user><br/>
2011-08-03 15:59:18 INFO::test<br/>
R> <user>getHandler('basic.stdout')[['level']]</user><br/>
WARN <br/>
  30 <br/>
R> <user>getHandler('writeToConsole')[['level']]</user><br/>
INFO <br/>
  20 <br/>
</code>

<p>This means that, in order to obtain output on any level below
<tt>INFO</tt> (e.g., 
<tt>DEBUG</tt> or even 
<tt>FINEST</tt>),
you need to lower the level of both the root logger
and its handler:</p>

<code>
R> <user>basicConfig()</user><br/>
R> <user>logdebug('I am a silent child')</user><br/>
R> <user>setLevel('DEBUG')</user><br/>
R> <user>logdebug('Still no output shown')</user><br/>
R> <user>setLevel('DEBUG', getHandler('basic.stdout'))</user><br/>
R> <user>logdebug('Only now the output is visible')</user><br/>
2011-08-03 15:59:23 DEBUG::Only now the output is visible<br/>
R> 
</code>

<p><a href="the_basics.R">code</a></p>
